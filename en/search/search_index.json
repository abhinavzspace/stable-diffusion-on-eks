{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stable Diffusion on EKS","text":"<p>Working in progress</p> <p>Documentation in English is a working in progress.</p> <p>Implementing a fast scaling and low cost Stable Diffusion inference solution with serverless and containers on AWS</p> <p>Stable Diffusion is a popular open source project for generating images using Gen AI. Building a scalable and cost efficient inference solution is a common challenge AWS customers facing. This project shows how to use serverless and container services to build an end-to-end low cost and fast scaling asyncronous image generation architecture. This repo contains the sample code and CDK deployment scripts, helping you to deploy this solution in a few steps.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Asyncronous API and Serverless Event-Driven Architecture</li> <li>Image Generation with Stable Diffusion Web UI on Amazon EKS</li> <li>Automatic queue length based scaling with KEDA</li> <li>Automatic provisioning ec2 instances with Karpenter</li> <li>Scaling up new inference nodes within 2 minutes</li> <li>Saving up to 70% with GPU spot instances</li> </ul>"},{"location":"implementation-guide/faq/","title":"\u5e38\u89c1\u95ee\u9898\u89e3\u7b54","text":""},{"location":"implementation-guide/faq/#_2","title":"\u4e00\u822c\u95ee\u9898","text":""},{"location":"implementation-guide/release-notes/","title":"Release notes","text":"\u65e5\u671f \u66f4\u65b0\u8bb0\u5f55 2023 \u5e74 10 \u6708 \u9996\u6b21\u53d1\u5e03\u7248\u672c"},{"location":"implementation-guide/trouble-shooting/","title":"\u6545\u969c\u6392\u67e5","text":"<p>\u4ee5\u4e0b\u4ecb\u7ecd\u5728\u4f7f\u7528 Stable Diffusion on Amazon EKS \u89e3\u51b3\u65b9\u6848\u65f6\u53ef\u80fd\u9047\u5230\u7684\u9519\u8bef\u6216\u95ee\u9898\uff0c\u4ee5\u53ca\u89e3\u51b3\u65b9\u6cd5\u3002</p>"},{"location":"implementation-guide/uninstall/","title":"\u5378\u8f7d\u89e3\u51b3\u65b9\u6848","text":""},{"location":"implementation-guide/architecture/architecture/","title":"\u67b6\u6784\u6982\u89c8","text":"<p>[![arch]][arch]</p> <ul> <li>Users send prompts to the application running on Amazon Fargate via Amazon CloudFront</li> <li>Application backend sends the prompt to Amazon API Gateway, Amazon Lambda validates the requests, and publishes to an Amazon SNS topic</li> <li>SNS publishes the message to Amazon SQS queues via matching subscription filters</li> <li>In Amazon EKS cluster, open source Kubernetes Event Driven Auto-Scaler\u00a0(KEDA) scales up new pods based on the queue length</li> <li>Karpenter (an open source Kubernetes compute auto-scaler) launches new GPU spot instances to place pending pods. The nodes run Bottlerocket OS with pre-cached Stable Diffusion Runtime images</li> <li>SD Runtime loads model files from Amazon EFS file system</li> <li>Queue Agent calls SD Runtime to generate images and save them to Amazon S3</li> <li>Queue Agent sends output to a SNS topic and the application backend receives notification from SQS queue</li> <li>Amazon CloudWatch, Amazon Distro for OpenTelemetry, and Amazon X-Ray collect metrics, logs, and traces to monitor guidance components</li> <li>Amazon IAM for security and resource access control, Amazon CDK for automated deployment of guidance components into AWS*</li> </ul>"},{"location":"implementation-guide/architecture/services-in-this-solution/","title":"Services in this solution","text":"<p>\u4ee5\u4e0b AWS \u670d\u52a1\u5305\u62ec\u5728\u6b64\u89e3\u51b3\u65b9\u6848\u4e2d\uff1a</p> AWS \u670d\u52a1 \u63cf\u8ff0 Amazon S3 \u7528\u4e8e\u5b58\u50a8\u6a21\u578b\u548c\u751f\u6210\u7684\u56fe\u50cf\u3002 Amazon EFS \u7528\u4e8e\u5b58\u50a8\u6a21\u578b\u3002 Amazon ECR \u7528\u4e8e\u5b58\u50a8\u8fd0\u884c\u65f6\u6240\u9700\u7684\u5bb9\u5668\u955c\u50cf\u3002 Amazon API Gateway \u7528\u4e8e\u63d0\u4f9b\u5bf9\u5916\u8bbf\u95ee\u7684API\u63a5\u53e3\u3002 AWS Lambda \u7528\u4e8e\u8fdb\u884c\u8bf7\u6c42\u9a8c\u8bc1\u548c\u8def\u7531\u3002 Amazon SQS \u7528\u4e8e\u5b58\u653e\u5f85\u5904\u7406\u7684\u4efb\u52a1\u3002 Amazon SNS \u7528\u4e8e\u5c06\u4efb\u52a1\u8def\u7531\u5230\u4e0d\u540c\u7684SQS\u961f\u5217\uff0c\u4ee5\u53ca\u63d0\u4f9b\u5904\u7406\u5b8c\u6210\u540e\u901a\u77e5\u548c\u56de\u8c03\u3002 Amazon EKS \u7528\u4e8e\u7ba1\u7406\u548c\u8fd0\u884c Stable Diffusion \u8fd0\u884c\u65f6\u3002 Amazon EC2 \u7528\u4e8e\u8fd0\u884c Stable Diffusion \u8fd0\u884c\u65f6\u3002 Amazon CloudWatch \u7528\u4e8e\u76d1\u63a7\u7cfb\u7edf\u7684\u8fd0\u884c\u72b6\u51b5\uff0c\u63d0\u4f9b\u6570\u503c\u76d1\u63a7\uff0c\u65e5\u5fd7\u548c\u8ddf\u8e2a\u3002 AWS CDK \u7528\u4e8e\u90e8\u7f72\u548c\u66f4\u65b0\u8be5\u89e3\u51b3\u65b9\u6848\u3002"},{"location":"implementation-guide/deployment/","title":"\u6982\u89c8","text":""},{"location":"implementation-guide/deployment/configuration/","title":"Configuration","text":""},{"location":"implementation-guide/deployment/configuration/#infrastructure","title":"Infrastructure","text":"<p>We use config file to customize infrastructure and runtime. By default, the config file name is <code>config.yaml</code>. You can use alternative config file by changing environment variable <code>CDK_CONFIG_PATH</code>.</p> <p>The following table lists the configurable parameters of CDK template and the default values.</p> Parameter Description Required Default <code>stackName</code> Name of the stack. The name will be added as a prefix of all resource name. Yes <code>SdOnEKS</code> <code>modelBucketArn</code> S3 bucket for model storage. Models file should be manual populated into the bucket. This parameter applies to all runtimes. Yes <code>\"\"</code> <code>modelsRuntime</code> Define Stable diffusion runtime. At least one runtime should be defined. Yes <code>- name: \"sdruntime\"  modelFilename: \"v1-5-pruned-emaonly.ckpt\"</code> <code>modelsRuntime.name</code> Name of individual Stable diffusion runtime. Yes <code>sdruntime</code> <code>modelsRuntime.namespace</code> Namespace of individual Stable diffusion runtime. Yes <code>default</code> <code>modelsRuntime.chartRepository</code> Override default helm chart repository. Protocol (<code>oci://</code> or <code>https://</code>)should be added as a prefix of repository. (Default: <code>https://aws-samples.github.io/stable-diffusion-on-eks</code>) No N/A <code>modelsRuntime.chartVersion</code> Override version of helm chart. (Default: 0.1.0) No N/A <code>modelsRuntime.modelFilename</code> File of model using in the runtime. Filename should be in <code>.ckpt</code> or <code>.safetensors</code> format. Filename should be quoted if contains number only. Yes <code>v1-5-pruned-emaonly.safetensors</code> <code>modelsRuntime.extraValues</code> Extra parameter passed to the runtime. See values definition for detail. No N/A <code>dynamicModelRuntime.enabled</code> Generate a runtime which allows models be switched by request. See multi model support for detail. Yes <code>false</code> <code>dynamicModelRuntime.namespace</code> Namespace of dynamic model runtime. Required if <code>dynamicModelRuntime.enabled</code> is <code>true</code>. No <code>default</code> <code>dynamicModelRuntime.chartRepository</code> Override default helm chart repository. (Default: <code>https://aws-samples.github.io/stable-diffusion-on-eks</code>) No N/A <code>dynamicModelRuntime.chartVersion</code> Override version of helm chart. (Default: 0.1.0) No N/A <code>dynamicModelRuntime.extraValues</code> Extra parameter passed to the runtime. See values definition for detail. No N/A"},{"location":"implementation-guide/deployment/configuration/#application-helm-chart","title":"Application (Helm Chart)","text":"<p>Stable diffusion runtime are deployed via helm chart. You can customize individual stable diffusion runtime by passing values via <code>modelsRuntime.extraValues</code>.</p> <p>The following table lists the configurable parameters of helm chart and the default values. All values are not mandatory. Please some value will be populated by CDK, and not changeable by user.</p> Parameter Description Default Global <code>global.awsRegion</code> AWS region where the stack resides. Not changable. Populated by CDK <code>global.stackName</code> Name of CDK stack. Not changable. Populated by CDK Karpenter Provisioner <code>karpenter.provisioner.labels</code> Labels applied to all nodes. Should be in key-values format. <code>{}</code> <code>karpenter.provisioner.capacityType.onDemand</code> Allow Karpenter to launch on-demand node. <code>true</code> <code>karpenter.provisioner.capacityType.spot</code> Allow Karpenter to create spot node. When <code>provisioner.capacityType.onDemand</code> is true, Karpenter will priortize launching Spot instance. <code>true</code> <code>karpenter.provisioner.instanceType</code> An array of instance types Karpenter can launch. Should only include instance type available in current region. <code>- \"g5.xlarge\"</code> <code>karpenter.provisioner.extraRequirements</code> Additional requirement for Karpenter to choose instance type. <code>[]</code> <code>karpenter.provisioner.extraTaints</code> Provisioned nodes will have <code>nvidia.com/gpu:NoSchedule</code> and <code>runtime:NoSchedule</code> taints by default. Use this paremeter for additional taints. <code>[]</code> <code>karpenter.provisioner.resourceLimits</code> Resource limits prevent Karpenter from creating new instances once the limit is exceeded. <code>cpu</code>, <code>memory</code> and <code>nvidia.com/gpu</code> are supported. <code>nvidia.com/gpu: 100</code> <code>karpenter.provisioner.consolidation</code> Enables consolidation which attempts to removing un-needed nodes and down-sizing those that can't be removed. <code>true</code> Karpenter Node Template <code>karpenter.nodeTemplate.securityGroupSelector</code> Tagged security groups will be attached to instances. Not changable. Populated by CDK <code>karpenter.nodeTemplate.subnetSelector</code> Instances will be launched in tagged subnets. Not changable. Populated by CDK <code>karpenter.nodeTemplate.tags</code> Tags applied to all nodes. Should be in key-values format. <code>{}</code> <code>karpenter.nodeTemplate.amiFamily</code> OS option for worker nodes. Karpenter will automatically query for the appropriate EKS optimized AMI via AWS Systems Manager (SSM). <code>AL2</code> and <code>Bottlerocket</code> are supported. <code>Bottlerocket</code> <code>karpenter.nodeTemplate.osVolume</code> Control the Elastic Block Storage (EBS) volumes that Karpenter attaches to provisioned nodes. See this for schema. This volume will be attached to <code>/dev/xvda</code>. <code>karpenter.nodeTemplate.dataVolume</code> Control the Elastic Block Storage (EBS) volumes that Karpenter attaches to provisioned nodes. See this for schema. This volume will be attached to <code>/dev/xvdb</code>. Required when using <code>Bottlerocket</code>. <code>karpenter.nodeTemplate.userData</code> UserData that is applied to your worker nodes. See the examples here for format. <code>\"\"</code> sdWebuiInferenceApi <code>sdWebuiInferenceApi.labels</code> Labels applied to all resources. Should be in key-values format. <code>\"\"</code> <code>sdWebuiInferenceApi.annotations</code> Annotations applied to stable diffusion runtime. Should be in key-values format. <code>\"\"</code> <code>sdWebuiInferenceApi.serviceAccountName</code> Name of service account used by runtime. Not changable. Populated by CDK <code>sdWebuiInferenceApi.replicas</code> Replica count of runtime. <code>1</code> <code>sdWebuiInferenceApi.scaling.enabled</code> Enable auto scaling by SQS length. <code>true</code> <code>sdWebuiInferenceApi.scaling.queueLength</code> Target value for queue length. KEDA will scale pod to <code>ApproximateNumberOfMessage / queueLength</code> replicas. <code>10</code> <code>sdWebuiInferenceApi.scaling.cooldownPeriod</code> The period (in seconds) to wait after the last trigger reported active before scaling the resource back to <code>minReplicaCount</code>. <code>60</code> <code>sdWebuiInferenceApi.scaling.maxReplicaCount</code> This setting is passed to the HPA definition that KEDA will create for a given resource and holds the maximum number of replicas of the target resource. <code>20</code> <code>sdWebuiInferenceApi.scaling.minReplicaCount</code> Minimum number of replicas KEDA will scale the resource down to. <code>0</code> <code>sdWebuiInferenceApi.scaling.pollingInterval</code> Interval (in seconds) to check each trigger on. <code>1</code> <code>sdWebuiInferenceApi.scaling.scaleOnInFlight</code> When set to <code>true</code>, not visible (in-flight) messages will be counted in <code>ApproximateNumberOfMessage</code> <code>false</code> <code>sdWebuiInferenceApi.scaling.extraHPAConfig</code> KEDA would feed values from this section directly to the HPA\u2019s <code>behavior</code> field. Follow Kubernetes documentation for details. <code>{}</code> Stable Diffusion Runtime <code>sdWebuiInferenceApi.inferenceApi.image.repository</code> Image Repository of Runtime. <code>sdoneks/inference-api</code> <code>sdWebuiInferenceApi.inferenceApi.image.tag</code> Image tag of Runtime. <code>latest</code> <code>sdWebuiInferenceApi.inferenceApi.modelFilename</code> Model filename of Runtime. Not changable. Populated by CDK <code>sdWebuiInferenceApi.inferenceApi.extraEnv</code> Extra environment variable for Runtime. Should be in Kubernetes format. <code>{}</code> <code>sdWebuiInferenceApi.inferenceApi.resources</code> Resource request and limit for Runtime. Queue Agent <code>sdWebuiInferenceApi.queueAgent.image.repository</code> Image Repository of queue agent. <code>sdoneks/queue-agent</code> <code>sdWebuiInferenceApi.queueAgent.image.tag</code> Image tag of queue agent. <code>latest</code> <code>sdWebuiInferenceApi.queueAgent.extraEnv</code> Extra environment variable for queue agent. Should be in Kubernetes format. <code>{}</code> <code>sdWebuiInferenceApi.queueAgent.dynamicModel</code> Enable model switch by request. Not changable. Populated by CDK <code>sdWebuiInferenceApi.queueAgent.s3Bucket</code> S3 bucket for generated image. Not changable. Populated by CDK <code>sdWebuiInferenceApi.queueAgent.snsTopicArn</code> SNS topic for image generate complete notification. Not changable. Populated by CDK <code>sdWebuiInferenceApi.queueAgent.sqsQueueUrl</code> SQS queue URL of job queue. Not changable. Populated by CDK <code>sdWebuiInferenceApi.queueAgent.resources</code> Resource request and limit for queue agent. <code>sdWebuiInferenceApi.queueAgent.XRay.enabled</code> Enable X-ray tracing agent for queue agent. <code>true</code> Persistence <code>sdWebuiInferenceApi.persistence.enabled</code> Enable presistence of model stroage. <code>true</code> <code>sdWebuiInferenceApi.persistence.labels</code> Labels applied to presistence volume. Should be in key-values format. <code>{}</code> <code>sdWebuiInferenceApi.persistence.annotations</code> Annotations applied to presistence volume. Should be in key-values format. <code>{}</code> <code>sdWebuiInferenceApi.persistence.storageClass</code> Storage class for model storage <code>efs-model-storage-sc</code> <code>sdWebuiInferenceApi.persistence.size</code> Size of persistence volume. <code>2Ti</code> <code>sdWebuiInferenceApi.persistence.accessModes</code> Access mode of persistence volume. <code>ReadWriteMany</code>"},{"location":"implementation-guide/deployment/configuration/#deployment-examples","title":"Deployment Examples","text":"<p>We provided example config file for your reference. These config files are located in <code>/examples</code>.</p>"},{"location":"implementation-guide/deployment/configuration/#multiple-runtimes","title":"Multiple Runtimes","text":"<p>You can add multiple runtimes with different models by adding entries in <code>modelsRuntime</code> array. Each runtime should have different <code>modelFilename</code>. We recommand deploying runtimes in their own namespace.</p> <pre><code>modelsRuntime:\n- name: \"sdruntime1\" # First runtime\n  namespace: \"sdruntime1\"\n  modelFilename: \"v1-5-pruned-emaonly.safetensors\"\n- name: \"sdruntime2\" # Second runtime\n  namespace: \"sdruntime2\"\n  modelFilename: \"v2-1_768-ema-pruned.safetensors\"\n</code></pre> <p>See <code>multiple-runtimes.yaml</code> for more reference.</p>"},{"location":"implementation-guide/deployment/configuration/#dynamic-model-runtime","title":"Dynamic Model Runtime","text":"<p>By default, models are pre-loaded to runtime. Each runtime only accept request with its model filename. You can create dynamic model runtime as a catch-all option. By enabling dynamic model runtime, a new runtime with default model <code>v1-5-pruned-emaonly.safetensors</code> is created. This runtime will accept all requests without a matching runtime. Then, the runtime will load model by request. Models should be stored in S3 bucket before sending a request with this model.</p> <pre><code>dynamicModelRuntime:\n  enabled: true # Enable dynamic model runtime by change the value to \"true\"\n  namespace: \"default\"\n</code></pre> <p>See <code>dynamic-runtime.yaml</code> for more reference.</p>"},{"location":"implementation-guide/deployment/considerations/","title":"\u8003\u8651\u56e0\u7d20","text":""},{"location":"implementation-guide/deployment/considerations/#_2","title":"\u53ef\u90e8\u7f72\u533a\u57df","text":"<p>\u6b64\u89e3\u51b3\u65b9\u6848\u4f7f\u7528\u7684\u670d\u52a1\uff0c\u6216EC2\u5b9e\u4f8b\u7c7b\u578b\u76ee\u524d\u53ef\u80fd\u5e76\u975e\u5728\u6240\u6709 AWS \u533a\u57df\u90fd\u53ef\u7528\u3002\u8bf7\u5728\u63d0\u4f9b\u6240\u9700\u670d\u52a1\u7684 AWS \u533a\u57df\u4e2d\u542f\u52a8\u6b64\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5df2\u9a8c\u8bc1\u53ef\u90e8\u7f72\u7684\u533a\u57df</p> \u533a\u57df\u540d\u79f0 \u9a8c\u8bc1\u901a\u8fc7 \u7f8e\u56fd\u4e1c\u90e8 (\u5f17\u5409\u5c3c\u4e9a\u5317\u90e8) \u7f8e\u56fd\u897f\u90e8 (\u4fc4\u52d2\u5188) <p>\u5982\u60a8\u5728\u672a\u7ecf\u9a8c\u8bc1\u7684\u533a\u57df\u8fdb\u884c\u90e8\u7f72\uff0c\u53ef\u80fd\u9700\u8981\u8fdb\u884c\u4ee5\u4e0b\u5904\u7406\uff0c\u6216\u9762\u4e34\u4ee5\u4e0b\u95ee\u9898\uff1a</p> <ul> <li>\u5728\u4e0d\u652f\u6301g5\u5b9e\u4f8b\u7c7b\u578b\u7684\u533a\u57df\u90e8\u7f72\u65f6\uff0c\u60a8\u9700\u8981\u624b\u5de5\u6307\u5b9a Karpenter \u4f7f\u7528\u7684\u5b9e\u4f8b\u7c7b\u578b\u4e3a <code>g4dn</code> \u6216\u5176\u4ed6 GPU \u5b9e\u4f8b\u7c7b\u578b\u3002</li> <li>\u5728\u90e8\u5206\u533a\u57df\u90e8\u7f72\u65f6\uff0c EFS \u7684\u6027\u80fd\u53ef\u80fd\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u8bf7\u53c2\u89c1 Amazon EFS\u6587\u6863 \u4ee5\u4e86\u89e3\u5728\u4e0d\u540c\u533a\u57df\u7684EFS\u8bfb\u53d6\u6027\u80fd\u3002</li> </ul>"},{"location":"implementation-guide/deployment/considerations/#iam","title":"IAM \u6743\u9650","text":"<p>\u90e8\u7f72\u8be5\u89e3\u51b3\u65b9\u6848\u9700\u8981\u7ba1\u7406\u5458\u6216\u4e0e\u4e4b\u76f8\u5f53\u7684\u6743\u9650\u3002</p>"},{"location":"implementation-guide/deployment/considerations/#choose-your-stable-diffusion-runtime","title":"Choose your Stable Diffusion Runtime","text":"<p>You need runtimes to deploy Stable Diffusion model and provide API access. There are several community Stable Diffusion runtimes available, and you can build your own runtime. You need to package runtime as a container image to run the runtime on EKS.</p> <p>Here are some examples:</p> <ul> <li>AUTOMATIC1111's Stable Diffusion Web UI</li> <li>InvokeAI</li> <li>ComfyUI</li> </ul> <p>For you convenience, you can use this sample Dockerfile to build a container image of AUTOMATIC1111's Stable Diffusion Web UI.</p>"},{"location":"implementation-guide/deployment/considerations/#_3","title":"\u91cd\u8981\u63d0\u793a","text":"<ul> <li>\u4e00\u4e2a\u533a\u57df\u4e2d\u53ea\u80fd\u6709\u4e00\u4e2a\u6d3b\u52a8\u7684Stable Diffusion on Amazon EKS\u89e3\u51b3\u65b9\u6848\u5806\u6808\u3002\u5982\u679c\u60a8\u7684\u90e8\u7f72\u5931\u8d25\uff0c\u8bf7\u786e\u4fdd\u5728\u91cd\u8bd5\u90e8\u7f72\u4e4b\u524d\u5df2\u5220\u9664\u5931\u8d25\u7684\u5806\u6808\u3002</li> </ul>"},{"location":"implementation-guide/deployment/deploy/","title":"Quick start","text":""},{"location":"implementation-guide/deployment/deploy/#provision-infrastructure-and-runtime","title":"Provision infrastructure and runtime","text":"<p>Required infrastructure and application is deployed via AWS CDK. We provide default configuration and image for quick start.</p> <p>Run the following command to clone the code:</p> <pre><code>git clone --recursive &lt;repo path&gt;\ncd stable-diffusion-on-eks\n</code></pre> <p>Before deploy, you need to edit <code>config.yaml</code> and set parameters of runtimes.</p>"},{"location":"implementation-guide/deployment/deploy/#define-model-bucket","title":"Define Model Bucket","text":"<p>Set <code>modelBucketArn</code> to the S3 bucket created on previous section.</p> <pre><code>modelBucketArn: arn:aws:s3:::&lt;bucket name&gt;\n</code></pre>"},{"location":"implementation-guide/deployment/deploy/#define-runtime","title":"Define Runtime","text":"<p>You need to specify each runtime in <code>modelsRuntime</code> section. For each runtime, specify the following value:</p> <pre><code>modelsRuntime:\n- name: \"sdruntime\" # Name of runtime, should be unique\n  namespace: \"default\" # Namespace of runtime, suggest deploy different runtimes on seperate namespaces\n  modelFilename: \"v1-5-pruned-emaonly.safetensors\" # Model for this runtime, request will be routed by model filename.\n  type: \"SDWebUI\" # Specify type of runtime. Different type of runtime represents different API Spec.\n  extraValues:\n    sdWebuiInferenceApi:\n      inferenceApi:\n        image:\n          repository: sdoneks/inference-api # Image repository of your runtime\n          tag: latest # Image tag of your runtime\n    queueAgent:\n      image:\n        repository: sdoneks/queue-agent # Image repository for queue agent\n        tag: latest # Image tag of queue agent\n</code></pre>"},{"location":"implementation-guide/deployment/deploy/#deploy","title":"Deploy","text":"<p>Run the following command to deploy the stack:</p> <pre><code>npm install\ncdk synth\ncdk deploy --all\n</code></pre> <p>Deployment requires 20-30 minutes.</p>"},{"location":"implementation-guide/deployment/deploy/#usage","title":"Usage","text":"<p>After deployment completes, you can get endpoint and key of API on CDK output:</p> <pre><code>Outputs:\nSdOnEksDataPlaneStack.APIKey = 1234567890abcdefghij\nSdOnEksDataPlaneStack.EfsFileSystemId = fs-1234567890abcdefg\nSdOnEksDataPlaneStack.FrontApiEndpoint = https://abcdefghij.execute-api.ap-southeast-1.amazonaws.com/prod/\n...\n</code></pre> <p>You can try it out by making API call with prompt. Your request should follow API Spec of corresponding runtime. For Stable Diffusion Web UI, save the following content as a JSON file:</p> <pre><code>{\n    \"alwayson_scripts\": {\n        \"task\": \"text-to-image\",\n        \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\",\n        \"id_task\": \"123\",\n        \"uid\": \"123\",\n        \"save_dir\": \"outputs\"\n    },\n    \"prompt\": \"A dog\",\n    \"steps\": 16,\n    \"width\": 512,\n    \"height\": 512\n}\n</code></pre> <p>Now you can use <code>curl</code> to test the solutions. Copy the following cURL command and paste it into the terminal window, replacing <code>1234567890abcdefghij</code> with content of <code>SdOnEksDataPlaneStack.APIKey</code>, <code>https://abcdefghij.execute-api.ap-southeast-1.amazonaws.com/prod/</code> with the content of <code>SdOnEksDataPlaneStack.FrontApiEndpoint</code>, and <code>test.json</code> of filename you just created.</p> <pre><code>curl -X POST https://abcdefghij.execute-api.ap-southeast-1.amazonaws.com/prod/ \\\n    -H 'Content-Type: application/json' \\\n    -H 'x-api-key: 1234567890abcdefghij' \\\n    -d @test.json\n</code></pre> <p>You should get a successful response with a payload similar to the following:</p> <pre><code>{\"id_task\": \"123\", \"task\": \"text-to-image\", \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\", \"output_location\": \"s3://sdoneksdataplanestack-outputs3bucket/123\"}\n</code></pre> <p>You may need to wait for several minutes for instance launching and container starting without EBS snapshot. Once container launched and task is proceed, you can find generated image on <code>output_location</code>.</p>"},{"location":"implementation-guide/deployment/ebs-snapshot/","title":"Building EBS Snapshot","text":"<p>You can optimize launch speed by pre-caching your image as an EBS snapshot. When a new instance is launched, the data volume of the instance is pre-populated with image. When using image caching, you don't need to pull image from registry. You need to use <code>BottleRocket</code> as OS of worker node to use image caching.</p> <p>EBS snapshot should be built before deploy infrastructure. Image should be pushed to a registry (Amazon ECR) before being cached. We provided a script for building EBS snapshot.</p> <p>Run the following command to build if you have built your own image. Replace <code>us-east-1</code> to your region and <code>123456789012</code> to your AWS account 12-digit ID:</p> <pre><code>git submodule update --init --recursive\ncd utils/bottlerocket-images-cache\n./snapshot.sh 123456789012.dkr.ecr.us-east-1.amazonaws.com/sd-on-eks/inference-api:latest,123456789012.dkr.ecr.us-east-1.amazonaws.com/sd-on-eks/queue-agent:latest\n</code></pre> <p>Run the following command to build if you want to use pre-built image from Dockerhub:</p> <pre><code>git submodule update --init --recursive\ncd utils/bottlerocket-images-cache\n./snapshot.sh sdoneks/inference-api:latest,sdoneks/queue-agent:latest\n</code></pre> <p>This script will launch an instance, pull image from registry, and capture a snapshot with pulled image.</p> <p>After snapshot is built, put snapshot ID into <code>config.yaml</code>:</p> <pre><code>modelsRuntime:\n- name: \"sdruntime\"\n  namespace: \"default\"\n  modelFilename: \"v1-5-pruned-emaonly.safetensors\"\n  extraValues:\n    karpenter:\n      nodeTemplate:\n        amiFamily: Bottlerocket\n        dataVolume:\n          volumeSize: 80Gi\n          volumeType: gp3\n          deleteOnTermination: true\n          iops: 4000\n          throughput: 1000\n          snapshotID: snap-0123456789 # Change to actual snapshot ID\n</code></pre> <p>See <code>example/ebs-snapshot.yaml</code> for more reference.</p>"},{"location":"implementation-guide/deployment/image-building/","title":"Build from source","text":""},{"location":"implementation-guide/deployment/image-building/#build-image","title":"Build Image","text":"<p>You can build queue agent container image on your environment from source. <code>queue-agent</code> is for fetching message from queue and convert message to API request to Stable Diffusion Runtime.</p> <p>To build <code>queue-agent</code> image, run the following command:</p> <pre><code>docker build -t queue-agent:latest src/backend/queue_agent/\n</code></pre>"},{"location":"implementation-guide/deployment/image-building/#push-image-to-amazon-ecr","title":"Push image to Amazon ECR","text":"<p>Before pushing image, create reposirory in Amazon ECR by running the following command:</p> <pre><code>aws ecr create-repository --repository-name sd-on-eks/queue-agent\n</code></pre> <p>You can push image to Amazon ECR by running the following command. Replace <code>us-east-1</code> to your region and <code>123456789012</code> to your AWS account 12-digit ID:</p> <pre><code>aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com\n\ndocker tag queue-agent:latest 123456789012.dkr.ecr.us-east-1.amazonaws.com/sd-on-eks/queue-agent:latest\ndocker push 123456789012.dkr.ecr.us-east-1.amazonaws.com/sd-on-eks/queue-agent:latest\n</code></pre>"},{"location":"implementation-guide/deployment/image-building/#build-and-push-helm-chart","title":"Build and push helm chart","text":"<p>Helm chart is packaged and stored in OCI-based registry. You can store helm chart in Amazon ECR.</p> <p>Before pushing charts, create reposirory in Amazon ECR by running the following command:</p> <pre><code>aws ecr create-repository --repository-name sd-on-eks/charts/sd-on-eks\n</code></pre> <p>Package and push helm chart to Amazon ECR by running the following command. Replace <code>us-east-1</code> to your region and <code>123456789012</code> to your AWS account 12-digit ID:</p> <pre><code>helm package src/charts/sd_on_eks\nhelm push sd-on-eks-&lt;version&gt;.tgz oci://123456789012.dkr.ecr.us-east-1.amazonaws.com/sd-on-eks/charts/\n</code></pre> <p>Now your chart is stored in Amazon ECR with <code>oci://123456789012.dkr.ecr.us-east-1.amazonaws.com/sd-on-eks/charts/sd-on-eks:&lt;version&gt;</code>.</p>"},{"location":"implementation-guide/deployment/models/","title":"Create S3 bucket and store model","text":"<p>Models should be stored in S3 bucket. Stable diffusion runtime will fetch model from S3 bucket at launch.</p> <p>Create S3 bucket by running the following command. Replace <code>&lt;bucket name&gt;</code> to your desired bucket name.</p> <pre><code>aws s3api create-bucket --bucket &lt;bucket name&gt; --region us-east-1\n</code></pre> <p>You can upload model to newly created S3 bucket by running the following command:</p> <pre><code>aws s3 cp &lt;model name&gt; s3://&lt;bucket name&gt;/models/stable-diffusion/\n</code></pre>"},{"location":"implementation-guide/developer/source/","title":"Source","text":"<p>\u8bbf\u95ee\u6211\u4eec\u7684 GitHub \u4ed3\u5e93 \u6765\u4e0b\u8f7d\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u7684\u6e90\u4ee3\u7801\u3002\u8be5\u89e3\u51b3\u65b9\u6848\u6a21\u677f\u662f\u4f7f\u7528 AWS Cloud Development Kit (CDK) \u751f\u6210\u7684\u3002\u8bf7\u53c2\u8003 README.md \u6587\u4ef6\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002</p>"},{"location":"implementation-guide/observability/logging/","title":"\u67e5\u770b\u65e5\u5fd7","text":""},{"location":"implementation-guide/observability/monitoring/","title":"\u67e5\u770b\u76d1\u63a7","text":""},{"location":"implementation-guide/solution-overview/cost/","title":"\u8d39\u7528\u9884\u4f30","text":"<p>\u91cd\u8981</p> <p>\u672c\u8282\u4e2d\u63cf\u8ff0\u7684\u6210\u672c\u4f30\u7b97\u53ea\u662f\u793a\u4f8b\uff0c\u53ef\u80fd\u4f1a\u56e0\u60a8\u7684\u73af\u5883\u800c\u5f02\u3002</p> <p>\u60a8\u9700\u8981\u627f\u62c5\u8fd0\u884c\u89e3\u51b3\u65b9\u6848\u65f6\u4f7f\u7528\u4e9a\u9a6c\u900a\u4e91\u79d1\u6280\u5404\u4e2a\u670d\u52a1\u7684\u6210\u672c\u8d39\u7528\u3002\u5f71\u54cd\u89e3\u51b3\u65b9\u6848\u6210\u672c\u7684\u4e3b\u8981\u56e0\u7d20\u5305\u62ec\uff1a</p> <ul> <li>\u9009\u62e9\u7684\u5b9e\u4f8b\u7c7b\u578b\u548c\u8d2d\u4e70\u65b9\u5f0f</li> <li>\u751f\u6210\u7684\u56fe\u7247\u91cf</li> <li>\u5f39\u6027\u4f38\u7f29\u914d\u7f6e</li> </ul>"},{"location":"implementation-guide/solution-overview/features/","title":"Features","text":"<p>\u672c\u89e3\u51b3\u65b9\u6848\u6709\u4ee5\u4e0b\u529f\u80fd\uff1a</p>"},{"location":"implementation-guide/solution-overview/use-cases/","title":"Use cases","text":"<p>\u8be5\u89e3\u51b3\u65b9\u6848\u9002\u7528\u4e8e\u4ee5\u4e0b\u7528\u4f8b\uff1a</p>"},{"location":"implementation-guide/usage/callback/","title":"\u56de\u8c03\u548c\u901a\u77e5","text":"<p>Stable Diffusion on Amazon EKS\u65b9\u6848\u91c7\u7528\u5f02\u6b65\u63a8\u7406\u6a21\u5f0f\uff0c\u5f53\u56fe\u7247\u751f\u6210\u6216\u62a5\u9519\u540e\uff0c\u4f1a\u901a\u8fc7Amazon SNS\u901a\u77e5\u7528\u6237\u3002\u7528\u6237\u5e94\u7528\u53ef\u4ee5\u901a\u8fc7\u8ba2\u9605SNS Topic\u4ee5\u83b7\u53d6\u56fe\u7247\u751f\u6210\u5b8c\u6210\u7684\u901a\u77e5\u3002</p> <p>\u8bf7\u53c2\u8003SNS\u6587\u6863\u4ee5\u4e86\u89e3SNS\u652f\u6301\u7684\u540e\u7aef\u79cd\u7c7b\u3002</p> <p>\u60a8\u53ef\u4ee5\u5728CloudFormation\u7684\u8f93\u51fa\u4e2d\u627e\u5230\u751f\u6210\u7684SNS Topic</p>"},{"location":"implementation-guide/usage/controlnet/","title":"ControlNet \u63d2\u4ef6","text":""},{"location":"implementation-guide/usage/controlnet/#_1","title":"\u8bf7\u6c42\u683c\u5f0f","text":"<pre><code>{\n    \"alwayson_scripts\": {\n        // \u5fc5\u8981\uff0c\u4efb\u52a1\u7c7b\u578b\n        \"task\": \"text-to-image\",\n        // \u5fc5\u8981\uff0c\u4efb\u52a1ID\uff0c\u5728\u4e0a\u4f20\u7ed3\u679c\u56fe\u7247\u548c\u8fd4\u56de\u54cd\u5e94\u65f6\u4f1a\u7528\u5230\n        \"id_task\": \"40521\",\n        // \u5fc5\u8981\uff0c\u57fa\u7840\u6a21\u578b\u540d\u79f0\uff0c\u5173\u8054\u961f\u5217\u5206\u53d1\u6216\u6a21\u578b\u5207\u6362\n        \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\",\n        // \u975e\u5fc5\u8981\uff0c\u7528\u6237id\n        \"uid\": \"123\",\n        // \u975e\u5fc5\u8981\uff0cControlNet\u53c2\u6570\n        \"controlnet\": {\n            \"args\": [\n                {\n                    \"image_link\": \"https://tse3-mm.cn.bing.net/th/id/OIP-C.2Z9l9li7mrfDThPW3_LE5wHaLG?pid=ImgDet&amp;rs=1\",\n                    \"module\": \"openpose\",\n                    \"model\": \"control_v11p_sd15_openpose\",\n                    \"enabled\": true,\n                    \"weight\": 1,\n                    \"resize_mode\": \"Crop and Resize\"\n                },\n                {\n                    \"image_link\": \"https://tse3-mm.cn.bing.net/th/id/OIP-C.2Z9l9li7mrfDThPW3_LE5wHaLG?pid=ImgDet&amp;rs=1\",\n                    \"module\": \"depth_leres\",\n                    \"model\": \"control_v11f1p_sd15_depth\",\n                    \"enabled\": true,\n                    \"weight\": 0.8,\n                    \"resize_mode\": \"Crop and Resize\"\n                }\n            ]\n        }\n    },\n    // \u4ee5\u4e0b\u7686\u4e3a\u5b98\u65b9\u53c2\u6570\uff0c\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216\u8005\u76f4\u63a5\u4f20\u5165\u5373\u53ef\n    \"prompt\": \"Best Quality, 1boy, wear golden LeoArmor, solo, short brown hair, looking at viewer\",\n    \"negative_prompt\": \"nsfw\",\n    \"sampler_index\": \"DPM++ SDE Karras\",\n    \"batch_size\": 1,\n    \"steps\": 16,\n    \"cfg_scale\": 7,\n    \"n_iter\": 3,\n    \"width\": 512,\n    \"height\": 512,\n    \"seed\": -1\n}\n</code></pre>"},{"location":"implementation-guide/usage/image-to-image/","title":"\u56fe\u751f\u56fe","text":"<p>Stable Diffusion\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u8f93\u5165Prompt\u548c\u53c2\u8003\u56fe\u50cf\uff0c\u53ef\u4ee5\u751f\u6210\u4e0e\u53c2\u8003\u56fe\u50cf\u7c7b\u4f3c\u7684\u56fe\u50cf\u3002</p>"},{"location":"implementation-guide/usage/image-to-image/#_2","title":"\u8bf7\u6c42\u683c\u5f0f","text":"<pre><code>{\n    \"alwayson_scripts\": {\n        // \u5fc5\u8981\uff0c\u4efb\u52a1\u7c7b\u578b\n        \"task\": \"image-to-image\",\n        // \u5fc5\u8981\uff0c\u8f93\u5165\u56fe\u7247\u7684url\n        \"image_link\": \"https://www.segmind.com/sd-img2img-input.jpeg\",\n        // \u5fc5\u8981\uff0c\u4efb\u52a1ID\uff0c\u5728\u4e0a\u4f20\u7ed3\u679c\u56fe\u7247\u548c\u8fd4\u56de\u54cd\u5e94\u65f6\u4f1a\u7528\u5230\n        \"id_task\": \"31311\",\n        // \u5fc5\u8981\uff0c\u57fa\u7840\u6a21\u578b\u540d\u79f0\uff0c\u5173\u8054\u961f\u5217\u5206\u53d1\u6216\u6a21\u578b\u5207\u6362\n        \"sd_model_checkpoint\": \"revAnimated_v122.safetensors\",\n        // \u975e\u5fc5\u8981\uff0c\u7528\u6237id\n        \"uid\": \"456\"\n    },\n    // \u4ee5\u4e0b\u7686\u4e3a\u5b98\u65b9\u53c2\u6570\uff0c\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216\u8005\u76f4\u63a5\u4f20\u5165\u5373\u53ef\n    \"prompt\": \"A fantasy landscape, trending on artstation, mystical sky\",\n    \"steps\": 16,\n    \"width\": 512,\n    \"height\": 512\n}\n</code></pre>"},{"location":"implementation-guide/usage/image-to-image/#_3","title":"\u54cd\u5e94\u683c\u5f0f","text":"<pre><code>{\n  \"id_task\": \"123\",\n  \"task\": \"image-to-image\",\n  \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\",\n  \"output_location\": \"s3://sdoneks-pdxstack-outputs3bucket9fe85b9f-s6khzv238u4a/123\"\n}\n</code></pre>"},{"location":"implementation-guide/usage/image-to-image/#_4","title":"\u56fe\u7247\u83b7\u53d6","text":"<p>\u5728\u56fe\u50cf\u5b8c\u6210\u751f\u6210\u540e\uff0c\u4f1a\u5b58\u50a8\u5230 <code>output_location</code> \u6240\u5728\u7684S3\u5b58\u50a8\u6876\u8def\u5f84\u4e2d\u3002</p>"},{"location":"implementation-guide/usage/lora/","title":"LoRA \u7cbe\u7ec6\u5316\u8c03\u4f18","text":"<p>LoRA\u53ef\u4ee5\u76f4\u63a5\u5728Prompt\u4e2d\u901a\u8fc7<code>&lt;lora:[\u540d\u79f0]:[\u7248\u672c]&gt;</code>\u4f20\u5165\u3002</p>"},{"location":"implementation-guide/usage/lora/#_1","title":"\u8bf7\u6c42\u683c\u5f0f","text":"<pre><code>{\n    \"alwayson_scripts\": {\n        // \u5fc5\u8981\uff0c\u4efb\u52a1\u7c7b\u578b\n        \"task\": \"text-to-image\",\n        // \u5fc5\u8981\uff0c\u4efb\u52a1ID\uff0c\u5728\u4e0a\u4f20\u7ed3\u679c\u56fe\u7247\u548c\u8fd4\u56de\u54cd\u5e94\u65f6\u4f1a\u7528\u5230\n        \"id_task\": \"40521\",\n        // \u5fc5\u8981\uff0c\u57fa\u7840\u6a21\u578b\u540d\u79f0\uff0c\u5173\u8054\u961f\u5217\u5206\u53d1\u6216\u6a21\u578b\u5207\u6362\n        \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\",\n        // \u975e\u5fc5\u8981\uff0c\u7528\u6237id\n        \"uid\": \"123\",\n    },\n    // \u4ee5\u4e0b\u7686\u4e3a\u5b98\u65b9\u53c2\u6570\uff0c\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216\u8005\u76f4\u63a5\u4f20\u5165\u5373\u53ef\n    \"prompt\": \"&lt;lora:LeoArmor:0.9&gt;, Best Quality, 1boy, wear golden LeoArmor, solo, short brown hair, looking at viewer\",\n    \"negative_prompt\": \"nsfw\",\n    \"sampler_index\": \"DPM++ SDE Karras\",\n    \"batch_size\": 1,\n    \"steps\": 16,\n    \"cfg_scale\": 7,\n    \"n_iter\": 3,\n    \"width\": 512,\n    \"height\": 512,\n    \"seed\": -1\n}\n</code></pre>"},{"location":"implementation-guide/usage/text-to-image/","title":"\u6587\u751f\u56fe","text":"<p>Stable Diffusion\u7684\u6700\u57fa\u672c\u7528\u6cd5\uff0c\u8f93\u5165Prompt\uff0c\u53ef\u4ee5\u751f\u6210\u5bf9\u5e94\u56fe\u50cf\u3002</p>"},{"location":"implementation-guide/usage/text-to-image/#_2","title":"\u8bf7\u6c42\u683c\u5f0f","text":"<pre><code>{\n    \"alwayson_scripts\": {\n        // \u5fc5\u8981\uff0c\u4efb\u52a1\u7c7b\u578b\n        \"task\": \"text-to-image\",\n        // \u5fc5\u8981\uff0c\u57fa\u7840\u6a21\u578b\u540d\u79f0\uff0c\u5173\u8054\u961f\u5217\u5206\u53d1\u6216\u6a21\u578b\u5207\u6362\n        \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\",\n        // \u5fc5\u8981\uff0c\u4efb\u52a1ID\uff0c\u5728\u4e0a\u4f20\u7ed3\u679c\u56fe\u7247\u548c\u8fd4\u56de\u54cd\u5e94\u65f6\u4f1a\u7528\u5230\n        \"id_task\": \"21123\",\n        \"uid\": \"456\",\n        \"save_dir\": \"outputs\"\n    },\n    // \u4ee5\u4e0b\u7686\u4e3a\u5b98\u65b9\u53c2\u6570\uff0c\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216\u8005\u76f4\u63a5\u4f20\u5165\u5373\u53ef\n    \"prompt\": \"A dog\",\n    \"steps\": 16,\n    \"width\": 512,\n    \"height\": 512\n}\n</code></pre>"},{"location":"implementation-guide/usage/text-to-image/#_3","title":"\u54cd\u5e94\u683c\u5f0f","text":"<pre><code>{\n  \"id_task\": \"123\",\n  \"task\": \"text-to-image\",\n  \"sd_model_checkpoint\": \"v1-5-pruned-emaonly.safetensors\",\n  \"output_location\": \"s3://sdoneks-pdxstack-outputs3bucket9fe85b9f-s6khzv238u4a/123\"\n}\n</code></pre>"},{"location":"implementation-guide/usage/text-to-image/#_4","title":"\u56fe\u7247\u83b7\u53d6","text":"<p>\u5728\u56fe\u50cf\u5b8c\u6210\u751f\u6210\u540e\uff0c\u4f1a\u5b58\u50a8\u5230 <code>output_location</code> \u6240\u5728\u7684S3\u5b58\u50a8\u6876\u8def\u5f84\u4e2d\u3002</p>"}]}